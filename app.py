"""
AI Video Generator - Main Application
·ª®ng d·ª•ng ch√≠nh ƒë·ªÉ t·∫°o video t·ª´ prompt s·ª≠ d·ª•ng AI
"""

import streamlit as st
import os
import sys
import json
import time
import datetime
import shutil
from pathlib import Path

# Th√™m modules v√†o path
sys.path.append(os.path.join(os.path.dirname(__file__), 'modules'))

from modules.script_generator import ScriptGenerator
from modules.image_generator import ImageGenerator
from modules.video_maker import VideoMaker
from modules.voice_generator import VoiceGenerator
from modules.motion_generator import MotionGenerator
from modules.flow_integration import FlowIntegration
from modules.veo3_integration import VEO3Integration, extract_cookie_from_browser
from modules.google_flow_integration import GoogleFlowIntegration, extract_bearer_token_from_cookie
from modules.google_flow_custom import GoogleFlowCustom, extract_cookie_from_guide
from modules.file_manager import FileManager
from modules.api_manager import api_manager
from modules.utils import (
    ConfigManager, ProjectManager, ProgressTracker, 
    DataValidator, ErrorHandler, setup_logging
)

# Thi·∫øt l·∫≠p trang
st.set_page_config(
    page_title="üé¨ AI Video Generator",
    page_icon="üé¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Thi·∫øt l·∫≠p logging
setup_logging()

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    .main-header {
        text-align: center;
        color: #1f77b4;
        margin-bottom: 2rem;
    }
    .step-header {
        color: #FF6B6B;
        border-bottom: 2px solid #FF6B6B;
        padding-bottom: 10px;
        margin-bottom: 20px;
    }
    .info-box {
        background-color: #1E1E1E;
        padding: 15px;
        border-radius: 10px;
        border-left: 4px solid #4ECDC4;
        margin: 10px 0;
    }
    .success-box {
        background-color: #1E1E1E;
        padding: 15px;
        border-radius: 10px;
        border-left: 4px solid #4ECDC4;
        margin: 10px 0;
    }
    .metric-container {
        background-color: #1E1E1E;
        padding: 10px;
        border-radius: 8px;
        margin: 5px 0;
    }
</style>
""", unsafe_allow_html=True)

def create_api_keys_section():
    """T·∫°o ph·∫ßn c·∫•u h√¨nh API Keys"""
    st.markdown("### ‚öôÔ∏è C·∫•u h√¨nh")
    
    # ƒê·ªçc API keys t·ª´ config.json
    import json
    try:
        with open('config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        config_keys = config.get('api_keys', {})
    except:
        config_keys = {}
    
    # Ch·ªâ hi·ªÉn th·ªã c√°c API keys ƒë√£ c√≥ trong config
    available_keys = {
        "google": ("ü§ñ Google Gemini", "Script Generation", "Mi·ªÖn ph√≠", "https://makersuite.google.com/app/apikey"),
        "openai": ("ü§ñ OpenAI", "Script/Image/Voice", "Tr·∫£ ph√≠", "https://platform.openai.com/api-keys"),
        "stability": ("üñºÔ∏è Stability AI", "Image Generation", "Tr·∫£ ph√≠", "https://platform.stability.ai/account/keys"),
        "elevenlabs": ("üé§ ElevenLabs", "Voice Generation", "Tr·∫£ ph√≠", "https://elevenlabs.io/app/settings/api-keys"),
        "google_flow": ("üé¨ Google Flow", "Motion Generation", "Tr·∫£ ph√≠", "https://aistudio.google.com/")
    }
    
    # L·ªçc ch·ªâ nh·ªØng keys c√≥ trong config
    active_keys = {k: v for k, v in available_keys.items() if k in config_keys}
    
    # API Status Dashboard
    st.markdown("**üìä API Status**")
    
    # T·∫°o status compact
    status_cols = st.columns(min(len(active_keys), 4))
    for i, (provider, (name, purpose, cost, link)) in enumerate(active_keys.items()):
        with status_cols[i % len(status_cols)]:
            current_key = api_manager.get_api_key(provider) or config_keys.get(provider, "")
            has_key = bool(current_key and current_key.strip())
            
            if has_key:
                st.success(f"‚úÖ {name.split(' ', 1)[1].replace('AI', '').replace('Google', 'G').replace('OpenAI', 'OAI')}")
            else:
                st.warning(f"‚ö†Ô∏è {name.split(' ', 1)[1].replace('AI', '').replace('Google', 'G').replace('OpenAI', 'OAI')}")
    
    # API Keys Management
    with st.expander("üîß API Keys Management", expanded=True):
        with st.form("api_keys_form"):
            st.markdown("**Nh·∫≠p API Keys:**")
            
            # T·∫°o columns cho inputs
            cols = st.columns(2)
            key_inputs = {}
            
            for i, (provider, (name, purpose, cost, link)) in enumerate(active_keys.items()):
                col_idx = i % 2
                with cols[col_idx]:
                    current_key = api_manager.get_api_key(provider) or config_keys.get(provider, "")
                    key_inputs[provider] = st.text_input(
                        name.split(' ', 1)[1],
                        value=current_key,
                        type="password",
                        help=f"{purpose} - {cost}",
                        key=f"key_{provider}"
                    )
            
            # Action buttons
            col_save, col_load, col_clear = st.columns(3)
            
            with col_save:
                save_keys = st.form_submit_button("üíæ L∆∞u Keys", type="primary", width='stretch')
            
            with col_load:
                load_config = st.form_submit_button("üîÑ Load Config", type="secondary", width='stretch')
            
            with col_clear:
                clear_keys = st.form_submit_button("üóëÔ∏è X√≥a Keys", type="secondary", width='stretch')
            
            if save_keys:
                saved_count = 0
                for provider, key in key_inputs.items():
                    if key and key.strip():
                        api_manager.set_api_key(provider, key.strip())
                        saved_count += 1
                
                if saved_count > 0:
                    st.success(f"‚úÖ ƒê√£ l∆∞u {saved_count} API keys!")
                else:
                    st.warning("‚ö†Ô∏è Kh√¥ng c√≥ API key n√†o ƒë∆∞·ª£c nh·∫≠p")
            
            if load_config:
                for provider in active_keys.keys():
                    config_key = config_keys.get(provider, "")
                    if config_key:
                        api_manager.set_api_key(provider, config_key)
                st.success("‚úÖ ƒê√£ load API keys t·ª´ config.json!")
            
            if clear_keys:
                for provider in active_keys.keys():
                    api_manager.set_api_key(provider, "")
                st.success("‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ API keys!")
    
    # Test API Keys
    st.markdown("**üß™ Test API Keys**")
    
    test_cols = st.columns(min(len(active_keys), 3))
    for i, (provider, (name, purpose, cost, link)) in enumerate(active_keys.items()):
        col_idx = i % len(test_cols)
        with test_cols[col_idx]:
            current_key = api_manager.get_api_key(provider) or config_keys.get(provider, "")
            has_key = bool(current_key and current_key.strip())
            
            if has_key:
                button_type = "primary"
                button_text = f"üß™ {name.split(' ', 1)[1].replace('AI', '').replace('Google', 'G').replace('OpenAI', 'OAI')}"
            else:
                button_type = "secondary"
                button_text = f"‚ö†Ô∏è {name.split(' ', 1)[1].replace('AI', '').replace('Google', 'G').replace('OpenAI', 'OAI')}"
            
            if st.button(button_text, type=button_type, width='stretch', key=f"test_{provider}"):
                if has_key:
                    try:
                        if provider == "google":
                            from modules.script_generator import ScriptGenerator
                            script_gen = ScriptGenerator()
                            result = script_gen.generate_script("Test", "google", 1, "cinematic", False, False, "general", "short")
                            if result and result.get('scenes'):
                                st.success("‚úÖ Google Gemini OK!")
                            else:
                                st.error("‚ùå Google Gemini Error")
                        
                        elif provider == "openai":
                            import openai
                            client = openai.OpenAI(api_key=current_key)
                            response = client.chat.completions.create(
                                model="gpt-3.5-turbo",
                                messages=[{"role": "user", "content": "Hello"}],
                                max_tokens=10
                            )
                            if response.choices:
                                st.success("‚úÖ OpenAI OK!")
                            else:
                                st.error("‚ùå OpenAI Error")
                        
                        elif provider == "elevenlabs":
                            import requests
                            url = "https://api.elevenlabs.io/v1/voices"
                            headers = {"xi-api-key": current_key}
                            response = requests.get(url, headers=headers)
                            if response.status_code == 200:
                                st.success("‚úÖ ElevenLabs OK!")
                            else:
                                st.error(f"‚ùå ElevenLabs Error: {response.status_code}")
                        
                        else:
                            st.info(f"‚úÖ {name} OK!")
                            
                    except Exception as e:
                        st.error(f"‚ùå {name}: {str(e)[:30]}...")
                else:
                    st.warning(f"‚ö†Ô∏è No key for {name}")
    
    # H∆∞·ªõng d·∫´n l·∫•y API Keys
    with st.expander("üìñ H∆∞·ªõng d·∫´n l·∫•y API Keys", expanded=False):
        st.markdown("### üîë H∆∞·ªõng d·∫´n chi ti·∫øt l·∫•y API Keys")
        
        # Tabs cho t·ª´ng lo·∫°i API
        guide_tabs = st.tabs(["ü§ñ Script", "üñºÔ∏è Image", "üé§ Voice", "üé¨ Motion"])
        
        with guide_tabs[0]:
            st.markdown("#### ü§ñ Script Generation APIs")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**Google Gemini (Mi·ªÖn ph√≠)**")
                st.markdown("""
                1. Truy c·∫≠p: https://makersuite.google.com/app/apikey
                2. ƒêƒÉng nh·∫≠p Google account
                3. Click "Create API Key"
                4. Copy key v√† paste v√†o √¥ tr√™n
                5. **Mi·ªÖn ph√≠**: 60 requests/ph√∫t
                """)
                
                if st.button("üîó M·ªü Google Gemini", key="open_google"):
                    st.markdown("üëâ [Truy c·∫≠p Google Gemini](https://makersuite.google.com/app/apikey)")
            
            with col2:
                st.markdown("**OpenAI GPT (Tr·∫£ ph√≠)**")
                st.markdown("""
                1. Truy c·∫≠p: https://platform.openai.com/api-keys
                2. ƒêƒÉng nh·∫≠p OpenAI account
                3. Click "Create new secret key"
                4. Copy key v√† paste v√†o √¥ tr√™n
                5. **Chi ph√≠**: $0.002/1K tokens
                """)
                
                if st.button("üîó M·ªü OpenAI", key="open_openai"):
                    st.markdown("üëâ [Truy c·∫≠p OpenAI](https://platform.openai.com/api-keys)")
        
        with guide_tabs[1]:
            st.markdown("#### üñºÔ∏è Image Generation APIs")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**Stability AI (Tr·∫£ ph√≠)**")
                st.markdown("""
                1. Truy c·∫≠p: https://platform.stability.ai/account/keys
                2. ƒêƒÉng k√Ω t√†i kho·∫£n
                3. T·∫°o API key m·ªõi
                4. Copy key v√† paste v√†o √¥ tr√™n
                5. **Chi ph√≠**: $0.004/·∫£nh
                """)
                
                if st.button("üîó M·ªü Stability AI", key="open_stability"):
                    st.markdown("üëâ [Truy c·∫≠p Stability AI](https://platform.stability.ai/account/keys)")
            
            with col2:
                st.markdown("**Pollinations AI (Mi·ªÖn ph√≠)**")
                st.markdown("""
                1. Kh√¥ng c·∫ßn API key
                2. S·ª≠ d·ª•ng tr·ª±c ti·∫øp
                3. **Mi·ªÖn ph√≠**: Kh√¥ng gi·ªõi h·∫°n
                4. Ch·∫•t l∆∞·ª£ng t·ªët
                5. T·ªëc ƒë·ªô nhanh
                """)
                
                st.success("‚úÖ Pollinations AI ƒë√£ s·∫µn s√†ng!")
        
        with guide_tabs[2]:
            st.markdown("#### üé§ Voice Generation APIs")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**ElevenLabs (Tr·∫£ ph√≠)**")
                st.markdown("""
                1. Truy c·∫≠p: https://elevenlabs.io/app/settings/api-keys
                2. ƒêƒÉng k√Ω t√†i kho·∫£n
                3. T·∫°o API key m·ªõi
                4. Copy key v√† paste v√†o √¥ tr√™n
                5. **Chi ph√≠**: $5/th√°ng (1M characters)
                """)
                
                if st.button("üîó M·ªü ElevenLabs", key="open_elevenlabs"):
                    st.markdown("üëâ [Truy c·∫≠p ElevenLabs](https://elevenlabs.io/app/settings/api-keys)")
            
            with col2:
                st.markdown("**Edge TTS (Mi·ªÖn ph√≠)**")
                st.markdown("""
                1. Kh√¥ng c·∫ßn API key
                2. S·ª≠ d·ª•ng tr·ª±c ti·∫øp
                3. **Mi·ªÖn ph√≠**: Kh√¥ng gi·ªõi h·∫°n
                4. Ch·∫•t l∆∞·ª£ng t·ªët
                5. Nhi·ªÅu gi·ªçng ƒë·ªçc
                """)
                
                st.success("‚úÖ Edge TTS ƒë√£ s·∫µn s√†ng!")
        
        with guide_tabs[3]:
            st.markdown("#### üé¨ Motion Generation APIs")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**Google Flow (Tr·∫£ ph√≠)**")
                st.markdown("""
                1. Truy c·∫≠p: https://aistudio.google.com/
                2. ƒêƒÉng nh·∫≠p Google account
                3. T·∫°o API key m·ªõi
                4. Copy key v√† paste v√†o √¥ tr√™n
                5. **Chi ph√≠**: $0.10/video
                """)
                
                if st.button("üîó M·ªü Google Flow", key="open_google_flow"):
                    st.markdown("üëâ [Truy c·∫≠p Google Flow](https://aistudio.google.com/)")
            
            with col2:
                st.markdown("**RunwayML (Tr·∫£ ph√≠)**")
                st.markdown("""
                1. Truy c·∫≠p: https://runwayml.com/
                2. ƒêƒÉng k√Ω t√†i kho·∫£n
                3. T·∫°o API key m·ªõi
                4. Copy key v√† paste v√†o √¥ tr√™n
                5. **Chi ph√≠**: $12/th√°ng
                """)
                
                if st.button("üîó M·ªü RunwayML", key="open_runwayml"):
                    st.markdown("üëâ [Truy c·∫≠p RunwayML](https://runwayml.com/)")
        
        # T√≥m t·∫Øt chi ph√≠
        st.markdown("---")
        st.markdown("### üí∞ T√≥m t·∫Øt chi ph√≠")
        
        cost_cols = st.columns(2)
        
        with cost_cols[0]:
            st.markdown("**üÜì Mi·ªÖn ph√≠:**")
            st.markdown("""
            - Google Gemini (Script)
            - Edge TTS (Voice)
            - Pollinations AI (Image)
            - MoviePy (Video)
            """)
        
        with cost_cols[1]:
            st.markdown("**üí∞ Tr·∫£ ph√≠:**")
            st.markdown("""
            - OpenAI: $0.002/1K tokens
            - Stability AI: $0.004/·∫£nh
            - ElevenLabs: $5/th√°ng
            - Google Flow: $0.10/video
            """)
        
        # L∆∞u √Ω b·∫£o m·∫≠t
        st.markdown("---")
        st.markdown("### üîí L∆∞u √Ω b·∫£o m·∫≠t")
        st.warning("""
        ‚ö†Ô∏è **Quan tr·ªçng:**
        - Kh√¥ng chia s·∫ª API keys v·ªõi ng∆∞·ªùi kh√°c
        - Kh√¥ng commit keys v√†o Git
        - Keys ƒë∆∞·ª£c l∆∞u local, an to√†n
        - C√≥ th·ªÉ x√≥a keys b·∫•t k·ª≥ l√∫c n√†o
        """)
    
    st.markdown("---")
    
    # Tabs cho c√°c lo·∫°i API
    api_tab1, api_tab2, api_tab3, api_tab4 = st.tabs(["Script", "Image", "Voice", "Motion"])
    
    with api_tab1:
        st.markdown("**Script Generation**")
        script_provider = st.selectbox(
            "Provider", 
            api_manager.get_available_providers("script"),
            index=0,
            key="script_provider"
        )
        
        if script_provider == "google":
            google_key = st.text_input("Google Gemini API Key", type="password", 
                                     placeholder="Nh·∫≠p Google Gemini API key c·ªßa b·∫°n...",
                                     key="google_key")
            if google_key:
                api_manager.set_api_key("google", google_key)
                st.success("‚úÖ Google Gemini API key ƒë√£ ƒë∆∞·ª£c l∆∞u")
        
        if script_provider == "openai":
            openai_key = st.text_input("OpenAI API Key", type="password", 
                                     placeholder="Nh·∫≠p OpenAI API key c·ªßa b·∫°n...",
                                     key="openai_key")
            if openai_key:
                api_manager.set_api_key("openai", openai_key)
                st.success("‚úÖ OpenAI API key ƒë√£ ƒë∆∞·ª£c l∆∞u")
    
    with api_tab2:
        st.markdown("**Image Generation**")
        image_provider = st.selectbox(
            "Provider", 
            api_manager.get_available_providers("image"),
            index=0,
            key="image_provider"
        )
        
        if image_provider == "openai":
            openai_key = st.text_input("OpenAI API Key", type="password", 
                                     placeholder="Nh·∫≠p OpenAI API key c·ªßa b·∫°n...",
                                     key="openai_key_image")
            if openai_key:
                api_manager.set_api_key("openai", openai_key)
                st.success("‚úÖ OpenAI API key ƒë√£ ƒë∆∞·ª£c l∆∞u")
        
        if image_provider == "stability":
            stability_key = st.text_input("Stability AI API Key", type="password", 
                                        placeholder="Nh·∫≠p Stability AI API key c·ªßa b·∫°n...",
                                        key="stability_key")
            if stability_key:
                api_manager.set_api_key("stability", stability_key)
                st.success("‚úÖ Stability AI API key ƒë√£ ƒë∆∞·ª£c l∆∞u")
    
    with api_tab3:
        st.markdown("**Voice Generation**")
        voice_provider = st.selectbox(
            "Provider", 
            api_manager.get_available_providers("voice"),
            index=0,
            key="voice_provider"
        )
        
        if voice_provider == "azure":
            azure_key = st.text_input("Azure Speech Service Key", type="password", 
                                    placeholder="Nh·∫≠p Azure Speech Service key c·ªßa b·∫°n...",
                                    key="azure_key_voice")
            if azure_key:
                api_manager.set_api_key("azure", azure_key)
                st.success("‚úÖ Azure Speech Service API key ƒë√£ ƒë∆∞·ª£c l∆∞u")
        
        if voice_provider == "openai":
            openai_key = st.text_input("OpenAI API Key", type="password", 
                                     placeholder="Nh·∫≠p OpenAI API key c·ªßa b·∫°n...",
                                     key="openai_key_voice")
            if openai_key:
                api_manager.set_api_key("openai", openai_key)
                st.success("‚úÖ OpenAI API key ƒë√£ ƒë∆∞·ª£c l∆∞u")
        
        if voice_provider == "elevenlabs":
            elevenlabs_key = st.text_input("ElevenLabs API Key", type="password", 
                                         placeholder="Nh·∫≠p ElevenLabs API key c·ªßa b·∫°n...",
                                         key="elevenlabs_key_voice")
            if elevenlabs_key:
                api_manager.set_api_key("elevenlabs", elevenlabs_key)
                st.success("‚úÖ ElevenLabs API key ƒë√£ ƒë∆∞·ª£c l∆∞u")
    
    with api_tab4:
        st.markdown("**Motion Generation**")
        motion_provider = st.selectbox(
            "Provider", 
            api_manager.get_available_providers("motion"),
            index=0,
            key="motion_provider"
        )
        
        if motion_provider == "google_flow":
            google_flow_key = st.text_input("Google Flow API Key", type="password", 
                                          placeholder="Nh·∫≠p Google Flow API key c·ªßa b·∫°n...")
            if google_flow_key:
                api_manager.set_api_key("google_flow", google_flow_key)
                st.success("‚úÖ Google Flow API key ƒë√£ ƒë∆∞·ª£c l∆∞u")
    
    # Test API Keys
    st.markdown("---")
    st.markdown("### üß™ Test API Keys")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üîç Test Script APIs", type="secondary"):
            test_script_apis()
    
    with col2:
        if st.button("üñºÔ∏è Test Image APIs", type="secondary"):
            test_image_apis()
    
    col3, col4 = st.columns(2)
    
    with col3:
        if st.button("üé§ Test Voice APIs", type="secondary"):
            test_voice_apis()
    
    with col4:
        if st.button("üé¨ Test Motion APIs", type="secondary"):
            test_motion_apis()
    
    # API Status
    st.markdown("---")
    st.markdown("### üìä API Status")
    
    # T√≠nh to√°n API status th·ª±c t·∫ø
    total_apis = 0
    available_apis = 0
    free_apis = 0
    paid_apis = 0
    
    # Script APIs
    script_providers = api_manager.get_available_providers("script")
    total_apis += len(script_providers)
    for provider in script_providers:
        if provider == "google":
            available_apis += 1
            free_apis += 1
        elif provider in ["openai", "anthropic"]:
            if api_manager.get_api_key(provider):
                available_apis += 1
                paid_apis += 1
    
    # Image APIs
    image_providers = api_manager.get_available_providers("image")
    total_apis += len(image_providers)
    for provider in image_providers:
        if provider == "pollinations":
            available_apis += 1
            free_apis += 1
        elif provider in ["openai", "stability", "replicate", "huggingface"]:
            if api_manager.get_api_key(provider):
                available_apis += 1
                paid_apis += 1
    
    # Voice APIs
    voice_providers = api_manager.get_available_providers("voice")
    total_apis += len(voice_providers)
    for provider in voice_providers:
        if provider in ["edge", "gtts"]:
            available_apis += 1
            free_apis += 1
        elif provider in ["openai", "azure", "elevenlabs"]:
            if api_manager.get_api_key(provider):
                available_apis += 1
                paid_apis += 1
    
    # Motion APIs
    motion_providers = api_manager.get_available_providers("motion")
    total_apis += len(motion_providers)
    for provider in motion_providers:
        if provider == "free":
            available_apis += 1
            free_apis += 1
        elif provider in ["google_flow", "runwayml", "pika_labs", "leia_pix"]:
            if api_manager.get_api_key(provider):
                available_apis += 1
                paid_apis += 1
    
    # Hi·ªÉn th·ªã API Status
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Available", available_apis)
    
    with col2:
        st.metric("Total", total_apis)
    
    with col3:
        st.metric("Free", free_apis)
    
    with col4:
        st.metric("Paid", paid_apis)

def test_script_apis():
    """Test script generation APIs"""
    st.info("üß™ Testing Script APIs...")
    
    try:
        from modules.script_generator import ScriptGenerator
        
        # Test Google Gemini (free)
        if api_manager.get_api_key("google"):
            try:
                generator = ScriptGenerator(provider="google")
                test_scenes = generator.generate_script("Test prompt", num_scenes=1, style="cinematic")
                if test_scenes:
                    st.success("‚úÖ Google Gemini: Working")
                else:
                    st.error("‚ùå Google Gemini: Failed")
            except Exception as e:
                st.error(f"‚ùå Google Gemini: {str(e)[:100]}")
        else:
            st.warning("‚ö†Ô∏è Google Gemini: No API key")
        
        # Test OpenAI
        if api_manager.get_api_key("openai"):
            try:
                generator = ScriptGenerator(provider="openai")
                test_scenes = generator.generate_script("Test prompt", num_scenes=1, style="cinematic")
                if test_scenes:
                    st.success("‚úÖ OpenAI: Working")
                else:
                    st.error("‚ùå OpenAI: Failed")
            except Exception as e:
                st.error(f"‚ùå OpenAI: {str(e)[:100]}")
        else:
            st.warning("‚ö†Ô∏è OpenAI: No API key")
            
    except Exception as e:
        st.error(f"‚ùå Script API Test Error: {e}")

def test_image_apis():
    """Test image generation APIs"""
    st.info("üß™ Testing Image APIs...")
    
    try:
        from modules.image_generator import ImageGenerator
        
        # Test Pollinations (free)
        try:
            generator = ImageGenerator(provider="pollinations")
            test_path = "temp/test_pollinations.png"
            os.makedirs("temp", exist_ok=True)
            result = generator.generate_image("test image", test_path, "1024x1024")
            if os.path.exists(result):
                st.success("‚úÖ Pollinations: Working")
                os.remove(result)  # Clean up
            else:
                st.error("‚ùå Pollinations: Failed")
        except Exception as e:
            st.error(f"‚ùå Pollinations: {str(e)[:100]}")
        
        # Test OpenAI
        if api_manager.get_api_key("openai"):
            try:
                generator = ImageGenerator(provider="openai")
                test_path = "temp/test_openai.png"
                result = generator.generate_image("test image", test_path, "1024x1024")
                if os.path.exists(result):
                    st.success("‚úÖ OpenAI DALL-E: Working")
                    os.remove(result)  # Clean up
                else:
                    st.error("‚ùå OpenAI DALL-E: Failed")
            except Exception as e:
                st.error(f"‚ùå OpenAI DALL-E: {str(e)[:100]}")
        else:
            st.warning("‚ö†Ô∏è OpenAI DALL-E: No API key")
            
    except Exception as e:
        st.error(f"‚ùå Image API Test Error: {e}")

def test_voice_apis():
    """Test voice generation APIs"""
    st.info("üß™ Testing Voice APIs...")
    
    try:
        from modules.voice_generator import VoiceGenerator
        
        # Test Edge TTS (free)
        try:
            generator = VoiceGenerator(provider="edge")
            test_path = "temp/test_edge.mp3"
            os.makedirs("temp", exist_ok=True)
            result = generator.generate_voice("test", test_path, "vi-VN-HoaiMyNeural")
            if os.path.exists(result):
                st.success("‚úÖ Edge TTS: Working")
                os.remove(result)  # Clean up
            else:
                st.error("‚ùå Edge TTS: Failed")
        except Exception as e:
            st.error(f"‚ùå Edge TTS: {str(e)[:100]}")
        
        # Test ElevenLabs
        if api_manager.get_api_key("elevenlabs"):
            try:
                generator = VoiceGenerator(provider="elevenlabs")
                test_path = "temp/test_elevenlabs.mp3"
                result = generator.generate_voice("test", test_path, "21m00Tcm4TlvDq8ikWAM")
                if os.path.exists(result):
                    st.success("‚úÖ ElevenLabs: Working")
                    os.remove(result)  # Clean up
                else:
                    st.error("‚ùå ElevenLabs: Failed")
            except Exception as e:
                st.error(f"‚ùå ElevenLabs: {str(e)[:100]}")
        else:
            st.warning("‚ö†Ô∏è ElevenLabs: No API key")
            
    except Exception as e:
        st.error(f"‚ùå Voice API Test Error: {e}")

def test_motion_apis():
    """Test motion generation APIs"""
    st.info("üß™ Testing Motion APIs...")
    
    try:
        from modules.motion_generator import MotionGenerator
        
        # Test Free motion
        try:
            generator = MotionGenerator(provider="free")
            test_path = "temp/test_motion.mp4"
            os.makedirs("temp", exist_ok=True)
            result = generator.generate_motion("outputs/images/scene_01.png", test_path)
            if os.path.exists(result):
                st.success("‚úÖ Free Motion: Working")
                os.remove(result)  # Clean up
            else:
                st.error("‚ùå Free Motion: Failed")
        except Exception as e:
            st.error(f"‚ùå Free Motion: {str(e)[:100]}")
        
        # Test Google Flow
        if api_manager.get_api_key("google_flow"):
            try:
                generator = MotionGenerator(provider="google_flow")
                st.success("‚úÖ Google Flow: API key available")
            except Exception as e:
                st.error(f"‚ùå Google Flow: {str(e)[:100]}")
        else:
            st.warning("‚ö†Ô∏è Google Flow: No API key")
            
    except Exception as e:
        st.error(f"‚ùå Motion API Test Error: {e}")

def create_google_flow_custom_tab():
    """Tab Google Flow Custom Video Generation"""
    st.markdown('<h2 class="step-header">üé¨ Google Flow Custom Video Generation</h2>', unsafe_allow_html=True)
    
    st.info("üé¨ Google Flow Custom l√† c√¥ng c·ª• t·∫°o video AI m·∫°nh m·∫Ω t·ª´ ·∫£nh d·ª±a tr√™n [Google Flow](https://labs.google/flow/about).")
    st.warning("‚ö†Ô∏è **L∆∞u √Ω:** S·ª≠ d·ª•ng cookie Bearer Token t·ª´ Google Flow, kh√¥ng ph·∫£i VEO3.")
    
    # Ki·ªÉm tra c√≥ ·∫£nh kh√¥ng
    has_images = 'image_paths' in st.session_state and st.session_state.image_paths
    
    if not has_images:
        st.warning("‚ö†Ô∏è Vui l√≤ng t·∫°o ·∫£nh tr∆∞·ªõc khi s·ª≠ d·ª•ng Google Flow Custom")
        return
    
    # L·∫•y d·ªØ li·ªáu
    scenes = st.session_state.get('scenes', st.session_state.get('saved_scenes', []))
    image_paths = st.session_state.image_paths
    
    st.success(f"‚úÖ S·∫µn s√†ng v·ªõi {len(scenes)} c·∫£nh v√† {len(image_paths)} ·∫£nh")
    
    # Google Flow Custom Configuration
    st.markdown("### üîë C·∫•u h√¨nh Google Flow Custom")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        flow_cookie = st.text_area(
            "Google Flow Bearer Token",
            placeholder="D√°n Bearer Token t·ª´ Google Flow v√†o ƒë√¢y...",
            help="L·∫•y Bearer Token t·ª´ Google Flow (F12 -> Network -> Authorization header)",
            height=100
        )
        
        project_uid = st.text_input(
            "Project UID",
            placeholder="Nh·∫≠p Project UID (v√≠ d·ª•: 386f8d1d-e4f7-4ab8-a085-da6632c72539)",
            help="UID c·ªßa project Flow t·ª´ URL: https://labs.google/fx/vi/tools/flow/project/{uid}"
        )
    
    with col2:
        st.markdown("**C√°ch l·∫•y Bearer Token:**")
        st.markdown("""
        1. M·ªü [Google Flow](https://labs.google/flow/about)
        2. T·∫°o project m·ªõi
        3. F12 -> Network tab
        4. Th·ª±c hi·ªán action b·∫•t k·ª≥
        5. T√¨m request c√≥ Authorization header
        6. Copy Bearer token
        7. Copy Project UID t·ª´ URL
        """)
    
    # Initialize Google Flow Custom
    if flow_cookie and project_uid:
        try:
            # Clean cookie
            clean_cookie = extract_cookie_from_guide(flow_cookie)
            flow = GoogleFlowCustom(clean_cookie, project_uid)
            
            st.success("‚úÖ Google Flow Custom ƒë√£ s·∫µn s√†ng!")
                
            # Video generation settings
            st.markdown("### ‚öôÔ∏è C√†i ƒë·∫∑t Video")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.info("üé¨ **Model:** veo_3_1_i2v_s_fast")
                st.info("üìê **Aspect Ratio:** Landscape (16:9)")
                st.info("üîí **Visibility:** Private")
            
            with col2:
                st.info("‚è±Ô∏è **Th·ªùi gian t·∫°o:** ~2-5 ph√∫t/video")
                st.info("üíæ **Format:** MP4")
                st.info("üéØ **Ch·∫•t l∆∞·ª£ng:** 1080p")
                
            # Generate videos
            if st.button("üé¨ T·∫°o Video Google Flow Custom", type="primary"):
                if not scenes:
                    st.error("‚ùå Kh√¥ng c√≥ k·ªãch b·∫£n ƒë·ªÉ t·∫°o video")
                    return
                
                # Prepare prompts
                prompts = []
                for scene in scenes:
                    if 'image_prompt' in scene:
                        prompts.append(scene['image_prompt'])
                    else:
                        prompts.append(scene.get('description', 'A cinematic scene'))
                
                # Create progress bar
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                # Generate videos
                created_videos = []
                
                for i, (image_path, prompt) in enumerate(zip(image_paths, prompts)):
                    try:
                        status_text.text(f"üé¨ T·∫°o video {i+1}/{len(image_paths)}: {Path(image_path).name}")
                        progress_bar.progress((i + 1) / len(image_paths))
                        
                        # 1. Upload image
                        status_text.text(f"üì§ Upload ·∫£nh {i+1}/{len(image_paths)}...")
                        media_id = flow.upload_image(image_path)
                        
                        if not media_id:
                            st.error(f"‚ùå Scene {i+1}: Kh√¥ng th·ªÉ upload ·∫£nh")
                            continue
                        
                        # 2. Create video
                        status_text.text(f"üé¨ T·∫°o video {i+1}/{len(image_paths)}...")
                        operation_id = flow.create_video(media_id, prompt)
                        
                        if not operation_id:
                            st.error(f"‚ùå Scene {i+1}: Kh√¥ng th·ªÉ t·∫°o video")
                            continue
                        
                        # 3. Wait for completion
                        status_text.text(f"‚è≥ Ch·ªù video {i+1}/{len(image_paths)} ho√†n th√†nh...")
                        max_wait = 300  # 5 ph√∫t
                        wait_time = 0
                        video_url = None
                        
                        while wait_time < max_wait:
                            status, video_url = flow.check_video_status(operation_id)
                            
                            if status == "SUCCESS":
                                break
                            elif status == "ERROR":
                                st.error(f"‚ùå Scene {i+1}: L·ªói t·∫°o video")
                                break
                            
                            time.sleep(10)
                            wait_time += 10
                            status_text.text(f"‚è≥ Ch·ªù video {i+1}/{len(image_paths)}... ({wait_time}s/{max_wait}s)")
                        
                        # 4. Download video
                        if video_url:
                            status_text.text(f"üì• T·∫£i video {i+1}/{len(image_paths)}...")
                            video_filename = f"scene_{i+1:02d}_video_{int(time.time())}.mp4"
                            video_path = Path("outputs/videos") / video_filename
                            video_path.parent.mkdir(parents=True, exist_ok=True)
                            
                            if flow.download_video(video_url, str(video_path)):
                                created_videos.append(str(video_path))
                                st.success(f"‚úÖ Scene {i+1}: Video t·∫°o th√†nh c√¥ng!")
                                
                                # Display video
                                with st.expander(f"üé¨ Video Scene {i+1}"):
                                    st.video(str(video_path))
                                    
                                    # Download button
                                    with open(video_path, "rb") as f:
                                        st.download_button(
                                            f"üì• T·∫£i video {i+1}",
                                            f.read(),
                                            file_name=f"scene_{i+1:02d}_video.mp4",
                                            mime="video/mp4"
                                        )
                            else:
                                st.error(f"‚ùå Scene {i+1}: Kh√¥ng th·ªÉ t·∫£i video")
                        else:
                            st.error(f"‚ùå Scene {i+1}: Kh√¥ng c√≥ URL video")
                        
                        # Wait between requests
                        if i < len(image_paths) - 1:
                            time.sleep(5)
                    
                    except Exception as e:
                        st.error(f"‚ùå L·ªói t·∫°o video scene {i+1}: {e}")
                
                # Summary
                if created_videos:
                    st.success(f"üéâ Ho√†n th√†nh! ƒê√£ t·∫°o {len(created_videos)} video")
                    
                    # Download all videos as ZIP
                    if st.button("üì• T·∫£i t·∫•t c·∫£ video (ZIP)", type="secondary"):
                        try:
                            import zipfile
                            import io
                            
                            zip_buffer = io.BytesIO()
                            with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                                for i, video_path in enumerate(created_videos):
                                    zip_file.write(video_path, f"scene_{i+1:02d}_video.mp4")
                            
                            zip_buffer.seek(0)
                            st.download_button(
                                "üì• T·∫£i ZIP",
                                zip_buffer.getvalue(),
                                file_name="google_flow_videos.zip",
                                mime="application/zip"
                            )
                        except Exception as e:
                            st.error(f"‚ùå L·ªói t·∫°o ZIP: {e}")
                
        
        except Exception as e:
            st.error(f"‚ùå L·ªói Google Flow Custom: {e}")
    
    else:
        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p Bearer Token v√† Project UID ƒë·ªÉ ti·∫øp t·ª•c")

def main():
    """Main function"""
    # Sidebar
    with st.sidebar:
        st.title("üé¨ AI Video Generator")
        
        # API Keys configuration
        create_api_keys_section()
        
        # Script configuration
        st.markdown("---")
        st.markdown("### üìù C·∫•u h√¨nh K·ªãch b·∫£n")
        
        script_provider = st.selectbox(
            "Nh√† cung c·∫•p Script",
            api_manager.get_available_providers("script"),
            index=api_manager.get_available_providers("script").index(api_manager.get_default_provider("script")) if api_manager.get_default_provider("script") in api_manager.get_available_providers("script") else 0,
            help="Ch·ªçn nh√† cung c·∫•p ƒë·ªÉ t·∫°o k·ªãch b·∫£n"
        )
        
        num_scenes = st.slider("S·ªë c·∫£nh", 1, 10, 3, help="S·ªë l∆∞·ª£ng c·∫£nh trong video")
        video_style = st.selectbox("Phong c√°ch video", ["cinematic", "documentary", "educational", "storytelling"], index=0)
        include_dialogue = st.checkbox("Bao g·ªìm ƒë·ªëi tho·∫°i", value=True, help="Th√™m ƒë·ªëi tho·∫°i gi·ªØa c√°c nh√¢n v·∫≠t")
        
        # C·∫•u h√¨nh ƒë·ªô d√†i k·ªãch b·∫£n
        st.markdown("### üìè C·∫•u h√¨nh ƒê·ªô d√†i K·ªãch b·∫£n")
        script_length = st.selectbox("ƒê·ªô d√†i k·ªãch b·∫£n", 
                                   ["ng·∫Øn", "trung b√¨nh", "d√†i", "r·∫•t d√†i", "si√™u d√†i (2 ph√∫t/c·∫£nh)"],
                                   index=4, # Default to ultra_long
                                   help="ƒê·ªô d√†i k·ªãch b·∫£n ·∫£nh h∆∞·ªüng ƒë·∫øn chi ti·∫øt v√† m√¥ t·∫£. 'Si√™u d√†i' t·∫°o k·ªãch b·∫£n 2 ph√∫t m·ªói c·∫£nh")
        
        # C·∫•u h√¨nh ng∆∞·ªùi d·∫´n chuy·ªán
        st.markdown("### üé≠ C·∫•u h√¨nh Ng∆∞·ªùi d·∫´n chuy·ªán")
        include_narrator = st.checkbox("Bao g·ªìm ng∆∞·ªùi d·∫´n chuy·ªán", value=True, help="Th√™m l·ªùi d·∫´n chuy·ªán cho video")
        narrator_style = st.selectbox("Phong c√°ch d·∫´n chuy·ªán", ["cinematic", "documentary", "educational", "storytelling"], index=0)
        
        # Image configuration
        st.markdown("---")
        st.markdown("### üñºÔ∏è C·∫•u h√¨nh ·∫¢nh")
        
        image_provider = st.selectbox(
            "Nh√† cung c·∫•p ·∫¢nh",
            api_manager.get_available_providers("image"),
            index=api_manager.get_available_providers("image").index(api_manager.get_default_provider("image")) if api_manager.get_default_provider("image") in api_manager.get_available_providers("image") else 0,
            help="Ch·ªçn nh√† cung c·∫•p ƒë·ªÉ t·∫°o ·∫£nh"
        )
        
        image_size = st.selectbox("K√≠ch th∆∞·ªõc ·∫£nh", ["1792x1024 (16:9)", "1024x1792 (9:16)"], index=0)
        
        # Voice configuration
        st.markdown("---")
        st.markdown("### üé§ C·∫•u h√¨nh Gi·ªçng n√≥i")
        
        voice_provider = st.selectbox(
            "Nh√† cung c·∫•p TTS",
            api_manager.get_available_providers("voice"),
            index=api_manager.get_available_providers("voice").index(api_manager.get_default_provider("voice")) if api_manager.get_default_provider("voice") in api_manager.get_available_providers("voice") else 0,
            help="Ch·ªçn nh√† cung c·∫•p text-to-speech"
        )
    
    # Main content
    st.title("üé¨ AI Video Generator")
    st.markdown("T·∫°o video AI t·ª´ √Ω t∆∞·ªüng c·ªßa b·∫°n v·ªõi k·ªãch b·∫£n, ·∫£nh, √¢m thanh v√† chuy·ªÉn ƒë·ªông t·ª± ƒë·ªông!")
    
    # Tabs
    tab1, tab2, tab3, tab4 = st.tabs(["üìù T·∫°o K·ªãch b·∫£n", "üñºÔ∏è T·∫°o ·∫¢nh", "üé¨ T·∫°o Video", "üé¨ Google Flow Custom"])
    
    with tab1:
        create_script_tab(script_provider, num_scenes, video_style, include_dialogue, include_narrator, narrator_style, script_length)
    
    with tab2:
        create_images_tab(image_provider, image_size)
    
    with tab3:
        create_video_tab()
    
    with tab4:
        create_google_flow_custom_tab()

def create_script_tab(script_provider, num_scenes, video_style, include_dialogue, include_narrator, narrator_style, script_length):
    """Tab t·∫°o k·ªãch b·∫£n"""
    st.markdown('<h2 class="step-header">üìù B∆∞·ªõc 1: T·∫°o K·ªãch b·∫£n</h2>', unsafe_allow_html=True)
    
    # T·∫£i k·ªãch b·∫£n t·ª´ file
    st.markdown("### üìÅ T·∫£i K·ªãch b·∫£n t·ª´ File")
    
    # N√∫t t·∫£i file m·∫´u
    col_template, col_upload = st.columns([1, 2])
    
    with col_template:
        st.markdown("**üìã File m·∫´u:**")
        if os.path.exists("templates/script_template.json"):
            with open("templates/script_template.json", "r", encoding="utf-8") as f:
                template_data = f.read()
            
            st.download_button(
                label="üì• T·∫£i File M·∫´u JSON",
                data=template_data,
                file_name="script_template.json",
                mime="application/json",
                type="secondary",
                help="T·∫£i file m·∫´u ƒë·ªÉ ch·ªânh s·ª≠a theo √Ω t∆∞·ªüng c·ªßa b·∫°n"
            )
        else:
            st.warning("‚ö†Ô∏è File m·∫´u kh√¥ng t·ªìn t·∫°i")
    
    with col_upload:
        st.markdown("**üì§ Upload k·ªãch b·∫£n:**")
        uploaded_script = st.file_uploader(
            "Ch·ªçn file k·ªãch b·∫£n (JSON ho·∫∑c TXT)",
            type=['json', 'txt'],
            help="T·∫£i k·ªãch b·∫£n ƒë√£ t·∫°o tr∆∞·ªõc ƒë√≥ ƒë·ªÉ ti·∫øp t·ª•c ch·ªânh s·ª≠a",
            label_visibility="collapsed"
        )
    
    if uploaded_script is not None:
        try:
            if uploaded_script.type == "application/json":
                # T·∫£i k·ªãch b·∫£n JSON
                script_data = json.load(uploaded_script)
                if 'scenes' in script_data:
                    st.session_state.scenes = script_data['scenes']
                    st.session_state.saved_scenes = script_data['scenes']
                    st.session_state.saved_project_scenes = script_data['scenes']
                    st.session_state.script_created = True
                    st.success(f"‚úÖ ƒê√£ t·∫£i k·ªãch b·∫£n v·ªõi {len(script_data['scenes'])} c·∫£nh!")
                    st.rerun()
                else:
                    st.error("‚ùå File JSON kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng k·ªãch b·∫£n")
            else:
                # T·∫£i k·ªãch b·∫£n TXT
                script_text = uploaded_script.read().decode('utf-8')
                st.session_state.uploaded_script_text = script_text
                st.success("‚úÖ ƒê√£ t·∫£i file k·ªãch b·∫£n TXT!")
                st.info("üí° S·ª≠ d·ª•ng text n√†y l√†m prompt ƒë·ªÉ t·∫°o k·ªãch b·∫£n m·ªõi")
        except Exception as e:
            st.error(f"‚ùå L·ªói t·∫£i file: {e}")
    
    # Hi·ªÉn th·ªã script text ƒë√£ t·∫£i n·∫øu c√≥
    if 'uploaded_script_text' in st.session_state:
        st.text_area("K·ªãch b·∫£n ƒë√£ t·∫£i:", value=st.session_state.uploaded_script_text, height=100)
        if st.button("üóëÔ∏è X√≥a Script ƒë√£ t·∫£i"):
            del st.session_state.uploaded_script_text
            st.rerun()
    
    # Ki·ªÉm tra v√† hi·ªÉn th·ªã k·ªãch b·∫£n ƒë√£ t·∫°o tr∆∞·ªõc ƒë√≥ (n·∫øu c√≥)
    if 'scenes' not in st.session_state and 'saved_scenes' not in st.session_state:
        # Ki·ªÉm tra file backup
        if os.path.exists('outputs/script_backup.json'):
            st.markdown("### üìã K·ªãch b·∫£n ƒë√£ t·∫°o tr∆∞·ªõc ƒë√≥")
            st.info("T√¨m th·∫•y k·ªãch b·∫£n ƒë√£ t·∫°o tr∆∞·ªõc ƒë√≥. B·∫°n c√≥ th·ªÉ kh√¥i ph·ª•c ho·∫∑c t·∫°o k·ªãch b·∫£n m·ªõi.")
            
            try:
                with open('outputs/script_backup.json', 'r', encoding='utf-8') as f:
                    backup_data = json.load(f)
                
                if 'scenes' in backup_data:
                    st.write(f"**S·ªë c·∫£nh:** {len(backup_data['scenes'])}")
                    st.write(f"**Prompt:** {backup_data.get('prompt', 'N/A')}")
                    st.write(f"**Phong c√°ch:** {backup_data.get('style', 'N/A')}")
                    
                    col_restore, col_delete = st.columns(2)
                    
                    with col_restore:
                        if st.button("üîÑ Kh√¥i ph·ª•c k·ªãch b·∫£n", type="secondary"):
                            st.session_state.saved_scenes = backup_data['scenes']
                            st.session_state.script_metadata = {
                                'prompt': backup_data.get('prompt', ''),
                                'style': backup_data.get('style', 'cinematic'),
                                'provider': backup_data.get('provider', 'google'),
                                'timestamp': backup_data.get('timestamp', '')
                            }
                            st.rerun()
                    
                    with col_delete:
                        if st.button("üóëÔ∏è X√≥a k·ªãch b·∫£n c≈©", type="secondary"):
                                if os.path.exists('outputs/script_backup.json'):
                                    os.remove('outputs/script_backup.json')
                                st.rerun()
                        
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc file backup: {e}")
            
            st.markdown("---")
    
    # Input prompt
    prompt = st.text_area(
        "Nh·∫≠p √Ω t∆∞·ªüng video c·ªßa b·∫°n:",
        placeholder="V√≠ d·ª•: M·ªôt cu·ªôc phi√™u l∆∞u k·ª≥ th√∫ trong r·ª´ng r·∫≠m v·ªõi nh·ªØng con v·∫≠t bi·∫øt n√≥i...",
        height=100,
        value=st.session_state.get('uploaded_script_text', '')
    )
    
    col1, col2 = st.columns([3, 1])
    
    with col1:
        # Ki·ªÉm tra API key
        if script_provider in ["openai", "anthropic"] and not api_manager.get_api_key(script_provider):
            st.error(f"Vui l√≤ng nh·∫≠p {script_provider.title()} API Key trong sidebar")
            return
        
        if st.button("üé¨ T·∫°o K·ªãch b·∫£n", type="primary", width='stretch'):
            if not prompt.strip():
                st.error("Vui l√≤ng nh·∫≠p √Ω t∆∞·ªüng video")
                return
            
            try:
                # T·∫°o script generator
                generator = ScriptGenerator(provider=script_provider)
                
                # Mapping ƒë·ªô d√†i
                length_mapping = {
                    "ng·∫Øn": "short",
                    "trung b√¨nh": "medium", 
                    "d√†i": "long",
                    "r·∫•t d√†i": "very_long",
                    "si√™u d√†i (2 ph√∫t/c·∫£nh)": "ultra_long"
                }
                script_length_key = length_mapping.get(script_length, "medium")
                
                # T·∫°o script
                with st.spinner("ƒêang t·∫°o k·ªãch b·∫£n..."):
                    scenes = generator.generate_script(
                        prompt=prompt,
                        num_scenes=num_scenes,
                        style=video_style,
                        include_dialogue=include_dialogue,
                        script_length=script_length_key
                    )
                
                # Th√™m narrator n·∫øu c·∫ßn
                if include_narrator:
                    from modules.script_generator import add_narrator_to_scenes
                    scenes = add_narrator_to_scenes(scenes, narrator_style)
                
                # L∆∞u v√†o session state
                st.session_state.scenes = scenes
                st.session_state.saved_scenes = scenes
                st.session_state.saved_project_scenes = scenes
                st.session_state.script_created = True
                st.session_state.script_prompt = prompt
                st.session_state.script_style = video_style
                
                # L∆∞u backup
                backup_data = {
                    'scenes': scenes,
                    'prompt': prompt,
                    'style': video_style,
                    'provider': script_provider,
                    'timestamp': datetime.datetime.now().isoformat()
                }
                os.makedirs('outputs', exist_ok=True)
                with open('outputs/script_backup.json', 'w', encoding='utf-8') as f:
                    json.dump(backup_data, f, ensure_ascii=False, indent=2)
                
                st.success(f"‚úÖ ƒê√£ t·∫°o k·ªãch b·∫£n v·ªõi {len(scenes)} c·∫£nh!")
                st.rerun()
                
            except Exception as e:
                st.error(f"‚ùå L·ªói t·∫°o k·ªãch b·∫£n: {e}")
    
    with col2:
        # Kh√¥i ph·ª•c t·ª´ backup
        if st.button("üîÑ Kh√¥i ph·ª•c Script", type="secondary"):
            if os.path.exists('outputs/script_backup.json'):
                try:
                    with open('outputs/script_backup.json', 'r', encoding='utf-8') as f:
                        backup_data = json.load(f)
                    st.session_state.scenes = backup_data['scenes']
                    st.session_state.saved_scenes = backup_data['scenes']
                    st.session_state.saved_project_scenes = backup_data['scenes']
                    st.session_state.script_created = True
                    st.success("‚úÖ ƒê√£ kh√¥i ph·ª•c t·ª´ backup!")
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå L·ªói kh√¥i ph·ª•c: {e}")
            else:
                st.warning("‚ö†Ô∏è Kh√¥ng c√≥ file backup")
    
    # Hi·ªÉn th·ªã k·ªãch b·∫£n ƒë√£ t·∫°o
    if 'scenes' in st.session_state and st.session_state.scenes:
        st.markdown("### üìã K·ªãch b·∫£n ƒë√£ t·∫°o")
        
        # N√∫t t·∫£i xu·ªëng k·ªãch b·∫£n
        col_download1, col_download2 = st.columns(2)
        
        with col_download1:
            # T·∫£i xu·ªëng JSON
            script_json = json.dumps({
                'scenes': st.session_state.scenes,
                'prompt': st.session_state.get('script_prompt', ''),
                'style': st.session_state.get('script_style', ''),
                'provider': script_provider,
                'timestamp': datetime.datetime.now().isoformat()
            }, ensure_ascii=False, indent=2)
            
            st.download_button(
                label="üì• T·∫£i K·ªãch b·∫£n JSON",
                data=script_json,
                file_name=f"script_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json",
                type="secondary"
            )
        
        with col_download2:
            # T·∫£i xu·ªëng TXT
            script_text = f"K·ªäCH B·∫¢N VIDEO\n"
            script_text += f"Ng√†y t·∫°o: {datetime.datetime.now().strftime('%d/%m/%Y %H:%M')}\n"
            script_text += f"Prompt: {st.session_state.get('script_prompt', '')}\n"
            script_text += f"Phong c√°ch: {st.session_state.get('script_style', '')}\n"
            script_text += f"S·ªë c·∫£nh: {len(st.session_state.scenes)}\n\n"
            
            for i, scene in enumerate(st.session_state.scenes):
                script_text += f"üé¨ C·∫¢NH {i+1}: {scene.get('title', 'Untitled')}\n"
                script_text += f"M√¥ t·∫£: {scene.get('description', '')}\n"
                if scene.get('dialogue'):
                    script_text += f"ƒê·ªëi tho·∫°i: {scene.get('dialogue', '')}\n"
                if scene.get('narrator'):
                    script_text += f"Ng∆∞·ªùi d·∫´n chuy·ªán: {scene.get('narrator', '')}\n"
                script_text += f"Th·ªùi l∆∞·ª£ng: {scene.get('duration', 'N/A')}\n"
                script_text += f"Chuy·ªÉn c·∫£nh: {scene.get('transition', 'N/A')}\n\n"
            
            st.download_button(
                label="üìÑ T·∫£i K·ªãch b·∫£n TXT",
                data=script_text,
                file_name=f"script_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                mime="text/plain",
                type="secondary"
            )
        
        # N√∫t x√≥a k·ªãch b·∫£n
        col_delete_script = st.columns(1)[0]
        with col_delete_script:
            if st.button("üóëÔ∏è X√≥a K·ªãch b·∫£n", type="secondary", width='stretch'):
                try:
                    # X√≥a kh·ªèi session state
                    keys_to_delete = ['scenes', 'saved_scenes', 'saved_project_scenes', 'script_created', 'script_prompt', 'script_style']
                    for key in keys_to_delete:
                        if key in st.session_state:
                            del st.session_state[key]
                    
                    # X√≥a file backup
                    if os.path.exists('outputs/script_backup.json'):
                        os.remove('outputs/script_backup.json')
                    
                    st.success("‚úÖ ƒê√£ x√≥a k·ªãch b·∫£n!")
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå L·ªói x√≥a k·ªãch b·∫£n: {e}")
        
        # Hi·ªÉn th·ªã chi ti·∫øt k·ªãch b·∫£n
        for i, scene in enumerate(st.session_state.scenes):
            with st.expander(f"üé¨ C·∫£nh {i+1}: {scene.get('title', 'Untitled')}"):
                st.write(f"**M√¥ t·∫£:** {scene.get('description', '')}")
                if scene.get('dialogue'):
                    st.write(f"**ƒê·ªëi tho·∫°i:** {scene.get('dialogue', '')}")
                if scene.get('narrator'):
                    st.write(f"**Ng∆∞·ªùi d·∫´n chuy·ªán:** {scene.get('narrator', '')}")
                st.write(f"**Th·ªùi l∆∞·ª£ng:** {scene.get('duration', 'N/A')}")
                st.write(f"**Chuy·ªÉn c·∫£nh:** {scene.get('transition', 'N/A')}")

def create_images_tab(image_provider, image_size):
    """Tab t·∫°o ·∫£nh"""
    st.markdown('<h2 class="step-header">üñºÔ∏è B∆∞·ªõc 2: T·∫°o ·∫¢nh</h2>', unsafe_allow_html=True)
    
    # T·∫£i ·∫£nh h√†ng lo·∫°t
    st.markdown("### üìÅ T·∫£i ·∫¢nh H√†ng lo·∫°t")
    uploaded_images = st.file_uploader(
        "Ch·ªçn nhi·ªÅu ·∫£nh c√πng l√∫c",
        type=['png', 'jpg', 'jpeg', 'webp'],
        accept_multiple_files=True,
        help="T·∫£i nhi·ªÅu ·∫£nh ƒë·ªÉ s·ª≠ d·ª•ng thay v√¨ t·∫°o ·∫£nh m·ªõi"
    )
    
    if uploaded_images:
        st.success(f"‚úÖ ƒê√£ t·∫£i {len(uploaded_images)} ·∫£nh!")
        
        # L∆∞u ·∫£nh ƒë√£ t·∫£i
        uploaded_image_paths = []
        for i, uploaded_file in enumerate(uploaded_images):
            # T·∫°o t√™n file
            file_extension = uploaded_file.name.split('.')[-1]
            image_path = f"outputs/images/uploaded_scene_{i+1:02d}.{file_extension}"
            
            # L∆∞u file
            with open(image_path, "wb") as f:
                f.write(uploaded_file.getbuffer())
            uploaded_image_paths.append(image_path)
        
        # L∆∞u v√†o session state v·ªõi timestamp ƒë·ªÉ tr√°nh conflict
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        st.session_state.uploaded_images = uploaded_image_paths
        st.session_state.image_paths = uploaded_image_paths
        st.session_state.uploaded_images_timestamp = timestamp
        
        # L∆∞u backup th√¥ng tin ·∫£nh ƒë√£ upload
        backup_info = {
            'uploaded_images': uploaded_image_paths,
            'timestamp': timestamp,
            'count': len(uploaded_image_paths)
        }
        os.makedirs('outputs', exist_ok=True)
        with open('outputs/uploaded_images_backup.json', 'w', encoding='utf-8') as f:
            json.dump(backup_info, f, ensure_ascii=False, indent=2)
        
        # Hi·ªÉn th·ªã ·∫£nh ƒë√£ t·∫£i
        st.markdown("#### üñºÔ∏è ·∫¢nh ƒë√£ t·∫£i:")
        
        # N√∫t t·∫£i xu·ªëng ZIP cho ·∫£nh ƒë√£ upload
        import zipfile
        import io
        
        # T·∫°o ZIP data tr∆∞·ªõc
        zip_data = None
        try:
            zip_buffer = io.BytesIO()
            with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                for i, image_path in enumerate(uploaded_image_paths):
                    if os.path.exists(image_path):
                        with open(image_path, 'rb') as f:
                            image_data = f.read()
                        zip_file.writestr(f"uploaded_scene_{i+1:02d}.{image_path.split('.')[-1]}", image_data)
            
            zip_buffer.seek(0)
            zip_data = zip_buffer.getvalue()
        except Exception as e:
            st.error(f"‚ùå L·ªói t·∫°o ZIP: {e}")
        
        if zip_data:
            st.download_button(
                label="üì¶ T·∫£i ZIP ·∫£nh ƒë√£ upload",
                data=zip_data,
                file_name=f"uploaded_images_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.zip",
                mime="application/zip",
                type="secondary",
                key=f"download_uploaded_zip_{len(uploaded_image_paths)}"
            )
        
        cols = st.columns(min(len(uploaded_image_paths), 3))
        for i, image_path in enumerate(uploaded_image_paths):
            with cols[i % 3]:
                st.image(image_path, caption=f"Scene {i+1}", width='stretch')
                
                # N√∫t t·∫£i xu·ªëng t·ª´ng ·∫£nh ƒë√£ upload - s·ª≠ d·ª•ng key unique
                if os.path.exists(image_path):
                    with open(image_path, "rb") as file:
                        file_data = file.read()
                        st.download_button(
                            label=f"üì• T·∫£i Scene {i+1}",
                            data=file_data,
                            file_name=f"uploaded_scene_{i+1:02d}.{image_path.split('.')[-1]}",
                            mime="image/png",
                            key=f"download_uploaded_scene_{i}_{len(uploaded_image_paths)}",  # Unique key
                            type="secondary",
                            width='stretch'
                        )
        
        if st.button("üóëÔ∏è X√≥a ·∫£nh ƒë√£ t·∫£i"):
            # X√≥a file ·∫£nh
            for image_path in uploaded_image_paths:
                if os.path.exists(image_path):
                    os.remove(image_path)
            # X√≥a kh·ªèi session state
            if 'uploaded_images' in st.session_state:
                del st.session_state.uploaded_images
            if 'image_paths' in st.session_state:
                del st.session_state.image_paths
            st.success("‚úÖ ƒê√£ x√≥a ·∫£nh ƒë√£ t·∫£i!")
            st.rerun()
        
        st.info("üí° ·∫¢nh ƒë√£ t·∫£i s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng thay v√¨ t·∫°o ·∫£nh m·ªõi. B·∫°n c√≥ th·ªÉ chuy·ªÉn sang tab 'T·∫°o Video' ƒë·ªÉ t·∫°o video.")
        return
    
    # Ki·ªÉm tra c√≥ script kh√¥ng
    if 'scenes' not in st.session_state and 'saved_scenes' not in st.session_state:
        st.markdown('<div class="info-box">‚ÑπÔ∏è Vui l√≤ng t·∫°o k·ªãch b·∫£n tr∆∞·ªõc khi t·∫°o ·∫£nh</div>', 
                   unsafe_allow_html=True)
        return
    
    # Ki·ªÉm tra v√† hi·ªÉn th·ªã ·∫£nh ƒë√£ t·∫°o tr∆∞·ªõc ƒë√≥ (n·∫øu c√≥)
    existing_images = []
    if os.path.exists("outputs/images"):
        for file in os.listdir("outputs/images"):
            if file.startswith("scene_") and file.endswith((".png", ".jpg", ".jpeg", ".webp")):
                existing_images.append(os.path.join("outputs/images", file))
    
    # Ki·ªÉm tra ·∫£nh ƒë√£ upload tr∆∞·ªõc ƒë√≥
    uploaded_images_backup = []
    if os.path.exists("outputs/uploaded_images_backup.json"):
        try:
            with open("outputs/uploaded_images_backup.json", "r", encoding="utf-8") as f:
                backup_data = json.load(f)
            if 'uploaded_images' in backup_data:
                # Ki·ªÉm tra file ·∫£nh c√≤n t·ªìn t·∫°i
                for image_path in backup_data['uploaded_images']:
                    if os.path.exists(image_path):
                        uploaded_images_backup.append(image_path)
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc backup ·∫£nh ƒë√£ upload: {e}")
    
    # N·∫øu c√≥ ·∫£nh ƒë√£ upload tr∆∞·ªõc ƒë√≥ v√† ch∆∞a c√≥ trong session state
    if uploaded_images_backup and 'image_paths' not in st.session_state:
        st.markdown("### üì§ ·∫¢nh ƒë√£ upload tr∆∞·ªõc ƒë√≥")
        st.info(f"T√¨m th·∫•y {len(uploaded_images_backup)} ·∫£nh ƒë√£ upload tr∆∞·ªõc ƒë√≥. B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng ch√∫ng ho·∫∑c upload ·∫£nh m·ªõi.")
        
        # Hi·ªÉn th·ªã ·∫£nh ƒë√£ upload
        cols = st.columns(min(len(uploaded_images_backup), 3))
        for i, image_path in enumerate(uploaded_images_backup):
            with cols[i % 3]:
                st.image(image_path, caption=f"Uploaded Scene {i+1}", width='stretch')
        
        # N√∫t s·ª≠ d·ª•ng v√† x√≥a ·∫£nh ƒë√£ upload
        col_use_uploaded, col_delete_uploaded = st.columns(2)
        
        with col_use_uploaded:
            if st.button("üîÑ S·ª≠ d·ª•ng ·∫£nh ƒë√£ upload", type="primary", width='stretch'):
                st.session_state.image_paths = sorted(uploaded_images_backup)
                st.session_state.saved_project_images = sorted(uploaded_images_backup)
                st.session_state.uploaded_images = sorted(uploaded_images_backup)
                st.success("‚úÖ ƒê√£ load ·∫£nh ƒë√£ upload tr∆∞·ªõc ƒë√≥!")
                st.rerun()
        
        with col_delete_uploaded:
            if st.button("üóëÔ∏è X√≥a ·∫£nh ƒë√£ upload", type="secondary", width='stretch'):
                try:
                    # X√≥a file ·∫£nh
                    for image_path in uploaded_images_backup:
                        if os.path.exists(image_path):
                            os.remove(image_path)
                    
                    # X√≥a file backup
                    if os.path.exists("outputs/uploaded_images_backup.json"):
                        os.remove("outputs/uploaded_images_backup.json")
                    
                    # X√≥a kh·ªèi session state n·∫øu c√≥
                    if 'image_paths' in st.session_state:
                        del st.session_state.image_paths
                    if 'saved_project_images' in st.session_state:
                        del st.session_state.saved_project_images
                    if 'uploaded_images' in st.session_state:
                        del st.session_state.uploaded_images
                    
                    st.success("‚úÖ ƒê√£ x√≥a ·∫£nh ƒë√£ upload!")
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå L·ªói x√≥a ·∫£nh: {e}")
        
        st.markdown("---")
    
    # N·∫øu c√≥ ·∫£nh ƒë√£ t·∫°o tr∆∞·ªõc ƒë√≥ v√† ch∆∞a c√≥ trong session state
    if existing_images and 'image_paths' not in st.session_state:
        st.markdown("### üñºÔ∏è ·∫¢nh ƒë√£ t·∫°o tr∆∞·ªõc ƒë√≥")
        st.info(f"T√¨m th·∫•y {len(existing_images)} ·∫£nh ƒë√£ t·∫°o tr∆∞·ªõc ƒë√≥. B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng ch√∫ng ho·∫∑c t·∫°o ·∫£nh m·ªõi.")
        
        # Hi·ªÉn th·ªã ·∫£nh ƒë√£ c√≥
        cols = st.columns(min(len(existing_images), 3))
        for i, image_path in enumerate(existing_images):
            with cols[i % 3]:
                st.image(image_path, caption=f"Scene {i+1}", width='stretch')
        
        # N√∫t s·ª≠ d·ª•ng v√† x√≥a ·∫£nh ƒë√£ c√≥
        col_use_images, col_delete_images = st.columns(2)
        
        with col_use_images:
            if st.button("üîÑ S·ª≠ d·ª•ng ·∫£nh ƒë√£ t·∫°o", type="primary", width='stretch'):
                st.session_state.image_paths = sorted(existing_images)
                st.session_state.saved_project_images = sorted(existing_images)
                st.success("‚úÖ ƒê√£ load ·∫£nh ƒë√£ t·∫°o tr∆∞·ªõc ƒë√≥!")
                st.rerun()
        
        with col_delete_images:
            if st.button("üóëÔ∏è X√≥a ·∫£nh c≈©", type="secondary", width='stretch'):
                try:
                    # X√≥a file ·∫£nh
                    for image_path in existing_images:
                        if os.path.exists(image_path):
                            os.remove(image_path)
                    
                    # X√≥a kh·ªèi session state n·∫øu c√≥
                    if 'image_paths' in st.session_state:
                        del st.session_state.image_paths
                    if 'saved_project_images' in st.session_state:
                        del st.session_state.saved_project_images
                    
                    st.success("‚úÖ ƒê√£ x√≥a ·∫£nh c≈©!")
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå L·ªói x√≥a ·∫£nh: {e}")
        
        st.markdown("---")
    
    # L·∫•y danh s√°ch c√°c k·ªãch b·∫£n c√≥ s·∫µn
    available_scripts = []
    
    # Load t·ª´ session state
    if 'scenes' in st.session_state:
        script_name = f"K·ªãch b·∫£n hi·ªán t·∫°i ({len(st.session_state.scenes)} c·∫£nh)"
        available_scripts.append((script_name, st.session_state.scenes))
    
    if 'saved_scenes' in st.session_state:
        script_name = f"K·ªãch b·∫£n ƒë√£ l∆∞u ({len(st.session_state.saved_scenes)} c·∫£nh)"
        available_scripts.append((script_name, st.session_state.saved_scenes))
    
    # Load t·ª´ file backup
    if os.path.exists('outputs/script_backup.json'):
        try:
            with open('outputs/script_backup.json', 'r', encoding='utf-8') as f:
                backup_data = json.load(f)
            if 'scenes' in backup_data:
                script_name = f"K·ªãch b·∫£n t·ª´ file ({len(backup_data['scenes'])} c·∫£nh)"
                available_scripts.append((script_name, backup_data['scenes']))
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc file backup: {e}")
    
    if not available_scripts:
        st.markdown('<div class="info-box">‚ÑπÔ∏è Kh√¥ng c√≥ k·ªãch b·∫£n n√†o ƒë·ªÉ t·∫°o ·∫£nh</div>', 
                   unsafe_allow_html=True)
        return
    
    # Dropdown ch·ªçn k·ªãch b·∫£n
    st.markdown("### üìã Ch·ªçn k·ªãch b·∫£n ƒë·ªÉ t·∫°o ·∫£nh")
    if len(available_scripts) == 1:
        selected_script_name, selected_scenes = available_scripts[0]
        st.info(f"üìù S·ª≠ d·ª•ng: {selected_script_name}")
    else:
        script_options = [script[0] for script in available_scripts]
        selected_script_idx = st.selectbox("Ch·ªçn k·ªãch b·∫£n:", range(len(script_options)), 
                                         format_func=lambda x: script_options[x])
        selected_script_name, selected_scenes = available_scripts[selected_script_idx]
    
    # Ki·ªÉm tra API key (ch·ªâ cho providers c·∫ßn key)
    if image_provider in ["openai", "stability", "replicate", "huggingface"] and not api_manager.get_api_key(image_provider):
        st.warning(f"‚ö†Ô∏è Kh√¥ng c√≥ API key cho {image_provider.title()}, s·∫Ω d√πng Pollinations thay th·∫ø")
        image_provider = "pollinations"
    
    # Th√¥ng b√°o v·ªÅ watermark c·ªßa Pollinations
    if image_provider == "pollinations":
        st.info("üí° **Pollinations AI:** Mi·ªÖn ph√≠, kh√¥ng c·∫ßn API key, ch·∫•t l∆∞·ª£ng t·ªët")
        st.warning("‚ö†Ô∏è **L∆∞u √Ω:** T·ª´ th√°ng 10/2025, Pollinations.ai t·ª± ƒë·ªông th√™m watermark v√†o ·∫£nh. App s·∫Ω t·ª± ƒë·ªông crop ƒë·ªÉ lo·∫°i b·ªè logo.")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üé® T·∫°o ·∫¢nh", type="primary", width='stretch'):
            try:
                # X√≥a ·∫£nh c≈© tr∆∞·ªõc khi t·∫°o m·ªõi
                if os.path.exists("outputs/images"):
                    for file in os.listdir("outputs/images"):
                        if file.startswith("scene_") and file.endswith((".png", ".jpg", ".jpeg", ".webp")):
                            os.remove(os.path.join("outputs/images", file))
                            st.write(f"üóëÔ∏è Deleted: {file}")
                
                # T·∫°o image generator
                generator = ImageGenerator(provider=image_provider)
                
                # T·∫°o th∆∞ m·ª•c output
                os.makedirs("outputs/images", exist_ok=True)
                
                # T·∫°o ·∫£nh cho t·ª´ng scene
                image_paths = []
                progress_bar = st.progress(0)
                
                for i, scene in enumerate(selected_scenes):
                    with st.spinner(f"ƒêang t·∫°o ·∫£nh cho c·∫£nh {i+1}/{len(selected_scenes)}..."):
                        # T·∫°o prompt cho ·∫£nh
                        image_prompt = scene.get('image_prompt', scene.get('description', ''))
                        
                        # Debug: Hi·ªÉn th·ªã th√¥ng tin prompt
                        st.write(f"**Scene {i+1}:** {scene.get('title', 'Untitled')}")
                        st.write(f"**Prompt length:** {len(image_prompt)} characters")
                        st.write(f"**Prompt:** {image_prompt[:100]}...")
                        
                        # T·∫°o ·∫£nh
                        image_path = f"outputs/images/scene_{i+1:02d}.png"
                        
                        # X·ª≠ l√Ω k√≠ch th∆∞·ªõc ·∫£nh
                        if "16:9" in image_size:
                            actual_size = "1792x1024"
                        elif "9:16" in image_size:
                            actual_size = "1024x1792"
                        else:
                            actual_size = "1792x1024"  # Default
                        
                        result_path = generator.generate_image(
                            prompt=image_prompt,
                            output_path=image_path,
                            size=actual_size
                        )
                        
                        image_paths.append(result_path)
                        progress_bar.progress((i + 1) / len(selected_scenes))
                
                # L∆∞u v√†o session state
                st.session_state.image_paths = image_paths
                st.session_state.saved_project_images = image_paths
                
                st.success(f"‚úÖ ƒê√£ t·∫°o {len(image_paths)} ·∫£nh!")
                st.rerun()
                
            except Exception as e:
                st.error(f"‚ùå L·ªói t·∫°o ·∫£nh: {e}")
                st.exception(e)
    
    # Hi·ªÉn th·ªã ·∫£nh ƒë√£ t·∫°o v√† n√∫t t·∫£i xu·ªëng
    if 'image_paths' in st.session_state and st.session_state.image_paths:
        st.markdown("---")
        st.markdown("### üñºÔ∏è ·∫¢nh ƒë√£ t·∫°o")
        
        image_paths = st.session_state.image_paths
        
        # N√∫t t·∫£i xu·ªëng t·∫•t c·∫£ ·∫£nh
        if st.button("üì• T·∫£i t·∫•t c·∫£ ·∫£nh (ZIP)", type="primary"):
            import zipfile
            import io
            
            zip_buffer = io.BytesIO()
            with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                for i, image_path in enumerate(image_paths):
                    if os.path.exists(image_path):
                        with open(image_path, 'rb') as f:
                            image_data = f.read()
                        zip_file.writestr(f"scene_{i+1:02d}.png", image_data)
            
            zip_buffer.seek(0)
            st.download_button(
                label="üì¶ T·∫£i ZIP ·∫£nh",
                data=zip_buffer.getvalue(),
                file_name=f"images_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.zip",
                mime="application/zip"
            )
        
        # Hi·ªÉn th·ªã ·∫£nh
        cols = st.columns(min(len(image_paths), 3))
        for i, image_path in enumerate(image_paths):
            with cols[i % 3]:
                if os.path.exists(image_path):
                    st.image(image_path, caption=f"Scene {i+1}", width='stretch')
                    
                    # N√∫t t·∫£i xu·ªëng t·ª´ng ·∫£nh
                    with open(image_path, "rb") as file:
                        file_data = file.read()
                    st.download_button(
                        label=f"üì• T·∫£i Scene {i+1}",
                        data=file_data,
                        file_name=f"scene_{i+1:02d}.png",
                        mime="image/png",
                        width='stretch'
                    )

def create_video_tab():
    """Tab t·∫°o video"""
    st.markdown('<h2 class="step-header">üé¨ B∆∞·ªõc 3: T·∫°o Video</h2>', unsafe_allow_html=True)
    
    # Ki·ªÉm tra c√≥ ·∫£nh kh√¥ng
    if 'image_paths' not in st.session_state or not st.session_state.image_paths:
        st.markdown('<div class="info-box">‚ÑπÔ∏è Vui l√≤ng t·∫°o ·∫£nh tr∆∞·ªõc khi t·∫°o video</div>', 
                   unsafe_allow_html=True)
        return
    
    # Ki·ªÉm tra c√≥ script kh√¥ng
    if 'scenes' not in st.session_state and 'saved_scenes' not in st.session_state:
        st.markdown('<div class="info-box">‚ÑπÔ∏è Vui l√≤ng t·∫°o k·ªãch b·∫£n tr∆∞·ªõc khi t·∫°o video</div>', 
                   unsafe_allow_html=True)
        return
    
    # L·∫•y scenes v√† images
    scenes = st.session_state.get('scenes', st.session_state.get('saved_scenes', []))
    image_paths = st.session_state.image_paths
    
    st.info(f"S·∫Ω t·∫°o video t·ª´ {len(scenes)} c·∫£nh v·ªõi {len(image_paths)} ·∫£nh")
    
    # C·∫•u h√¨nh voice settings
    st.markdown("### üé§ C·∫•u h√¨nh Gi·ªçng n√≥i")
    
    col1, col2 = st.columns(2)
    
    with col1:
        voice_provider = st.selectbox(
            "Nh√† cung c·∫•p TTS",
            ["edge", "elevenlabs", "openai", "gtts", "azure"],
            index=1,
            help="Ch·ªçn nh√† cung c·∫•p text-to-speech"
        )
        
        # Voice selection based on provider
        if voice_provider == "edge":
            available_voices = [
                "vi-VN-HoaiMyNeural", "vi-VN-NamMinhNeural", "vi-VN-ThanhDatNeural",
                "vi-VN-LinhNeural", "en-US-AriaNeural", "en-US-JennyNeural",
                "en-US-GuyNeural", "en-GB-SoniaNeural", "en-GB-RyanNeural"
            ]
            selected_voice = st.selectbox("Gi·ªçng n√≥i", available_voices, index=0)
        elif voice_provider == "openai":
            available_voices = ["alloy", "echo", "fable", "onyx", "nova", "shimmer"]
            selected_voice = st.selectbox("Gi·ªçng n√≥i", available_voices, index=0)
        elif voice_provider == "azure":
            available_voices = [
                "vi-VN-HoaiMyNeural", "vi-VN-NamMinhNeural", "vi-VN-ThanhDatNeural",
                "vi-VN-LinhNeural", "en-US-AriaNeural", "en-US-JennyNeural",
                "en-US-GuyNeural", "en-US-DavisNeural", "en-US-EmmaNeural",
                "en-US-BrianNeural", "en-GB-SoniaNeural", "en-GB-RyanNeural",
                "en-GB-LibbyNeural", "en-GB-MaisieNeural"
            ]
            selected_voice = st.selectbox("Gi·ªçng n√≥i", available_voices, index=0)
        elif voice_provider == "elevenlabs":
            available_voices = [
                "21m00Tcm4TlvDq8ikWAM", "AZnzlk1XvdvUeBnXmlld", "EXAVITQu4vr4xnSDxMaL",
                "ErXwobaYiN019PkySvjV", "MF3mGyEYCl7XYWbV9V6O", "TxGEqnHWrfWFTfGW9XjX",
                "VR6AewLTigWG4xSOukaG", "pNInz6obpgDQGcFmaJgB", "yoZ06aMxZJJ28mfd3POQ"
            ]
            selected_voice = st.selectbox("Gi·ªçng n√≥i", available_voices, index=0)
        else:  # gtts
            available_voices = ["vi", "en", "en-us", "en-gb"]
            selected_voice = st.selectbox("Gi·ªçng n√≥i", available_voices, index=0)
    
    with col2:
        voice_rate = st.selectbox(
            "T·ªëc ƒë·ªô n√≥i",
            ["-50%", "-25%", "+0%", "+25%", "+50%"],
            index=2,
            help="ƒêi·ªÅu ch·ªânh t·ªëc ƒë·ªô n√≥i"
        )
        
        voice_pitch = st.selectbox(
            "Cao ƒë·ªô gi·ªçng",
            ["-50Hz", "-25Hz", "+0Hz", "+25Hz", "+50Hz"],
            index=2,
            help="ƒêi·ªÅu ch·ªânh cao ƒë·ªô gi·ªçng n√≥i"
        )
    
    # Test voice button
    if st.button("üéµ Test Gi·ªçng n√≥i", type="secondary"):
        test_text = "Xin ch√†o, ƒë√¢y l√† test gi·ªçng n√≥i. B·∫°n c√≥ th·ªÉ nghe th·∫•y t√¥i kh√¥ng?"
        try:
            from modules.voice_generator import VoiceGenerator
            generator = VoiceGenerator(provider=voice_provider)
            test_path = "temp/test_voice.mp3"
            os.makedirs("temp", exist_ok=True)
            result = generator.generate_voice(test_text, test_path, selected_voice, voice_rate, voice_pitch)
            if os.path.exists(result):
                st.audio(result)
                st.success("‚úÖ Test gi·ªçng n√≥i th√†nh c√¥ng!")
            else:
                st.error("‚ùå Kh√¥ng th·ªÉ t·∫°o file audio test")
        except Exception as e:
            st.error(f"‚ùå L·ªói test gi·ªçng n√≥i: {e}")
    
    # C·∫•u h√¨nh video effects
    st.markdown("### ‚ú® C·∫•u h√¨nh Video")
    
    col3, col4 = st.columns(2)
    
    with col3:
        video_effect = st.selectbox("Hi·ªáu ·ª©ng video", ["ken_burns", "zoom_in", "zoom_out", "pan_left", "pan_right", "static"], index=0)
        video_fps = st.slider("FPS", 24, 60, 30)
        scene_duration = st.slider("Th·ªùi l∆∞·ª£ng m·ªói c·∫£nh (gi√¢y)", 1, 300, 120, help="Th·ªùi gian hi·ªÉn th·ªã m·ªói ·∫£nh trong video (1-300 gi√¢y = 5 ph√∫t)")
    
    with col4:
        video_resolution = st.selectbox("ƒê·ªô ph√¢n gi·∫£i", ["1920x1080", "1280x720", "854x480"], index=0)
        
        # Background music upload
        st.markdown("**Nh·∫°c n·ªÅn (t√πy ch·ªçn)**")
        background_music = st.file_uploader(
            "Ch·ªçn file nh·∫°c n·ªÅn",
            type=['mp3', 'wav', 'm4a'],
            help="T·∫£i l√™n file nh·∫°c n·ªÅn cho video"
        )
        
        background_music_path = None
        if background_music:
            background_music_path = f"temp/background_music.{background_music.name.split('.')[-1]}"
            with open(background_music_path, "wb") as f:
                f.write(background_music.getbuffer())
            st.success("‚úÖ ƒê√£ t·∫£i nh·∫°c n·ªÅn!")
    
    # T·∫°o video
    if st.button("üé¨ T·∫°o Video v·ªõi TTS", type="primary", width='stretch'):
        try:
            # Ki·ªÉm tra API key n·∫øu c·∫ßn
            if voice_provider in ["openai", "azure", "elevenlabs"] and not api_manager.get_api_key(voice_provider):
                st.error(f"Vui l√≤ng nh·∫≠p {voice_provider.title()} API Key trong sidebar")
                return
            
            # Voice settings
            voice_settings = {
                "provider": voice_provider,
                "voice": selected_voice,
                "rate": voice_rate,
                "pitch": voice_pitch,
                "api_key": api_manager.get_api_key(voice_provider) if voice_provider != "gtts" else None
            }
            
            # T·∫°o VideoMaker
            video_maker = VideoMaker(fps=video_fps, resolution=tuple(map(int, video_resolution.split('x'))))
            
            # ƒê∆∞·ªùng d·∫´n output
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            output_path = f"outputs/videos/final_video_{timestamp}.mp4"
            os.makedirs("outputs/videos", exist_ok=True)
            
            # T·∫°o video
            with st.spinner("ƒêang t·∫°o video..."):
                result = video_maker.create_complete_video(
                    scenes=scenes,
                    image_paths=image_paths,
                    output_path=output_path,
                    voice_settings=voice_settings,
                    background_music=background_music_path,
                    scene_duration=scene_duration
                )
            
            st.success(f"‚úÖ Video ƒë√£ ƒë∆∞·ª£c t·∫°o: {result}")
            
            # Hi·ªÉn th·ªã video
            st.video(result)
            
            # Download button
            with open(result, "rb") as file:
                            st.download_button(
                    label="üì• T·∫£i Video",
                    data=file.read(),
                    file_name=f"video_{timestamp}.mp4",
                    mime="video/mp4"
                            )
            
        except Exception as e:
            st.error(f"‚ùå L·ªói t·∫°o video: {e}")
    
    # X√≥a video ƒë√£ t·∫°o
    st.markdown("### üóëÔ∏è Qu·∫£n l√Ω Video")
    if st.button("üóëÔ∏è X√≥a t·∫•t c·∫£ Video ƒë√£ t·∫°o", type="secondary"):
        try:
            videos_dir = "outputs/videos"
            if os.path.exists(videos_dir):
                for file in os.listdir(videos_dir):
                    if file.endswith('.mp4'):
                        os.remove(os.path.join(videos_dir, file))
                st.success("‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ video!")
            else:
                st.info("‚ÑπÔ∏è Kh√¥ng c√≥ video n√†o ƒë·ªÉ x√≥a")
        except Exception as e:
            st.error(f"‚ùå L·ªói x√≥a video: {e}")

def create_flow_tab():
    """Tab Google Flow"""
    st.markdown('<h2 class="step-header">üåä Google Flow Integration</h2>', unsafe_allow_html=True)
    
    st.info("üåä Google Flow l√† c√¥ng c·ª• t·∫°o video AI m·∫°nh m·∫Ω t·ª´ Google. B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng ·∫£nh v√† k·ªãch b·∫£n ƒë√£ t·∫°o ƒë·ªÉ t·∫°o video tr√™n Google Flow.")
    
    # Ki·ªÉm tra c√≥ ·∫£nh v√† script kh√¥ng
    has_images = 'image_paths' in st.session_state and st.session_state.image_paths
    has_script = 'scenes' in st.session_state or 'saved_scenes' in st.session_state
    
    if not has_images or not has_script:
        st.warning("‚ö†Ô∏è Vui l√≤ng t·∫°o ·∫£nh v√† k·ªãch b·∫£n tr∆∞·ªõc khi s·ª≠ d·ª•ng Google Flow")
        return
    
    # L·∫•y d·ªØ li·ªáu
    scenes = st.session_state.get('scenes', st.session_state.get('saved_scenes', []))
    image_paths = st.session_state.image_paths
    
    st.success(f"‚úÖ S·∫µn s√†ng v·ªõi {len(scenes)} c·∫£nh v√† {len(image_paths)} ·∫£nh")
    
    # T·∫°o Flow Integration
    flow_integration = FlowIntegration()
    
    # Chu·∫©n b·ªã d·ªØ li·ªáu cho Flow
    flow_data = flow_integration.prepare_flow_data(scenes, image_paths)
    
    # Hi·ªÉn th·ªã th√¥ng tin
    st.markdown("### üìã D·ªØ li·ªáu cho Google Flow")
    st.json(flow_data)
    
    # Download flow data
    flow_json = json.dumps(flow_data, ensure_ascii=False, indent=2)
    st.download_button(
        label="üì• T·∫£i d·ªØ li·ªáu Flow",
        data=flow_json,
        file_name="flow_data.json",
        mime="application/json"
    )
    
    # Google Flow Integration
    st.markdown("### üåä Google Flow Video Generator")
    
    # Input Bearer Token
    bearer_token = st.text_input(
        "üîë Google Flow Bearer Token:",
        placeholder="Cookies",
        help="L·∫•y t·ª´ Developer Tools > Network > Headers > Authorization: Bearer [token]"
    )
    
    if bearer_token:
        clean_token = extract_bearer_token_from_cookie(bearer_token)
        
        # N√∫t t·∫°o video Google Flow
        if st.button("üöÄ T·∫°o Video Google Flow", type="primary", use_container_width=True):
            try:
                # L·∫•y script data t·ª´ session state
                script_data = {
                    "title": st.session_state.get('script_prompt', 'AI Generated Video'),
                    "scenes": scenes
                }
                
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                flow = GoogleFlowIntegration(clean_token)
                
                status_text.text("üîÑ ƒêang t·∫°o video v·ªõi Google Flow...")
                
                # T·∫°o video t·ª´ k·ªãch b·∫£n v√† ·∫£nh
                result = flow.create_video_from_script_and_images(script_data, image_paths)
                
                progress_bar.progress(0.5)
                
                if result["success"]:
                    st.success("‚úÖ Video ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
                    
                    media_generation_id = result["media_generation_id"]
                    st.session_state.google_flow_video_id = media_generation_id
                    
                    st.info(f"üé¨ Media Generation ID: {media_generation_id}")
                    st.info(f"üìä Status: {result.get('status', 'Unknown')}")
                    st.info(f"üé´ Remaining Credits: {result.get('remaining_credits', 'Unknown')}")
                    
                    # Check video status
                    status_text.text("üîÑ ƒêang ki·ªÉm tra tr·∫°ng th√°i video...")
                    
                    max_attempts = 30  # 5 minutes max
                    for attempt in range(max_attempts):
                        status_result = flow.check_video_status(media_generation_id)
                        
                        if status_result["success"]:
                            status = status_result["status"]
                            
                            if status == "MEDIA_GENERATION_STATUS_SUCCESSFUL":
                                video_url = status_result["video_url"]
                                fife_url = status_result.get("fife_url")
                                
                                st.success("üéâ Video ƒë√£ ho√†n th√†nh!")
                                st.info(f"üé´ Remaining Credits: {status_result.get('remaining_credits', 'Unknown')}")
                                
                                if video_url or fife_url:
                                    # Download video
                                    status_text.text("üì• ƒêang t·∫£i video...")
                                    
                                    output_path = f"outputs/videos/google_flow_video_{int(time.time())}.mp4"
                                    os.makedirs(os.path.dirname(output_path), exist_ok=True)
                                    
                                    # S·ª≠ d·ª•ng fife_url n·∫øu c√≥, n·∫øu kh√¥ng th√¨ d√πng video_url
                                    download_url = fife_url or video_url
                                    
                                    if flow.download_video(download_url, output_path):
                                        st.success(f"‚úÖ Video ƒë√£ ƒë∆∞·ª£c t·∫£i v·ªÅ: {output_path}")
                                        
                                        # Show video
                                        st.video(output_path)
                                        
                                        # Download button
                                        with open(output_path, 'rb') as f:
                                            video_data = f.read()
                                        
                                        st.download_button(
                                            label="üì• T·∫£i Video",
                                            data=video_data,
                                            file_name=f"google_flow_video_{int(time.time())}.mp4",
                                            mime="video/mp4"
                                        )
                                        
                                        progress_bar.progress(1.0)
                                        status_text.text("‚úÖ Ho√†n th√†nh!")
                                        break
                                    else:
                                        st.error("‚ùå L·ªói t·∫£i video")
                                        break
                                else:
                                    st.warning("‚ö†Ô∏è Video ho√†n th√†nh nh∆∞ng kh√¥ng c√≥ URL download")
                                    break
                                    
                            elif status == "MEDIA_GENERATION_STATUS_FAILED":
                                st.error("‚ùå Video t·∫°o th·∫•t b·∫°i")
                                break
                            else:
                                # Still processing
                                progress = (attempt + 1) / max_attempts
                                progress_bar.progress(progress)
                                status_text.text(f"üîÑ ƒêang x·ª≠ l√Ω video... ({status})")
                                time.sleep(10)  # Wait 10 seconds
                        else:
                            st.error(f"‚ùå L·ªói ki·ªÉm tra tr·∫°ng th√°i: {status_result['error']}")
                            break
                    else:
                        st.warning("‚è∞ Video ƒëang x·ª≠ l√Ω qu√° l√¢u. Vui l√≤ng th·ª≠ l·∫°i sau.")
                        
                else:
                    st.error(f"‚ùå L·ªói t·∫°o video: {result['error']}")
                    
            except Exception as e:
                st.error(f"‚ùå L·ªói t·∫°o video: {e}")
    
    st.markdown("---")
    
    # Redirect to Google Flow
    st.markdown("### üåä Chuy·ªÉn ƒë·∫øn Google Flow")
    st.markdown("""
    <div style="text-align: center; padding: 20px; background-color: #1E1E1E; border-radius: 10px;">
        <h3>üöÄ S·∫µn s√†ng t·∫°o video v·ªõi Google Flow!</h3>
        <p>B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng ·∫£nh v√† k·ªãch b·∫£n ƒë√£ t·∫°o ƒë·ªÉ t·∫°o video tr√™n Google Flow.</p>
        <a href="https://flow.google.com" target="_blank" style="background-color: #FF6B6B; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: inline-block; margin-top: 10px;">
            üåä M·ªü Google Flow
        </a>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()